import tkinter as tk
from tkinter import ttk, messagebox, filedialog, PhotoImage
import sqlite3
from datetime import datetime
from PIL import Image, ImageTk
import io
import shutil
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas

class CoffeeApp:       
    def __init__(self, root):
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ window
        self.root = root
        self.root.title("MN Coffee")
        self.root.attributes('-fullscreen', True)
        self.root.config(bg="#E9E7DC")

        # ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á , ‡πÅ‡∏ñ‡∏ö‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô 
        self.main_canvas = tk.Canvas(self.root, bg="#E9E7DC")
        self.main_canvas.pack(side="left", fill="both", expand=True)

        self.scrollbar = tk.Scrollbar(self.root, orient="vertical", command=self.main_canvas.yview)
        self.scrollbar.pack(side="right", fill="y")

        self.scrollable_frame = tk.Frame(self.main_canvas, bg="#E9E7DC")
        self.main_canvas.create_window((0, 0), window=self.scrollable_frame, anchor="nw")

        self.main_canvas.configure(yscrollcommand=self.scrollbar.set)
        self.scrollable_frame.bind("<Configure>", lambda e: self.main_canvas.configure(scrollregion=self.main_canvas.bbox("all")))

        # ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏°‡∏≤‡∏™‡πå
        self.root.bind_all("<MouseWheel>", self.on_mouse_wheel)

        # ‡∏ü‡∏≠‡∏ô‡∏ï‡πå
        self.font10 = ("FC Subject [Non-commercial] Reg", 10) 
        self.font16 = ("FC Subject [Non-commercial] Reg", 16)
        self.font20 = ("FC Subject [Non-commercial] Reg", 20)           
        self.font40 = ("FC Subject Rounded [Non-cml.] B", 40)

        self.customer_name = ""
        self.table_number = "0"
        self.order_list = []  # ‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ UI ‡πÅ‡∏•‡∏∞ db
        self.init_db()
        self.setup_ui()

    def on_mouse_wheel(self, event):
        # mouse wheel
        self.main_canvas.yview_scroll(-1 if event.delta > 0 else 1, "units")
    
    def init_db(self):
        self.conn = sqlite3.connect(r"C:\Users\user\Desktop\project\coffee.db")
        self.cursor = self.conn.cursor()
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS orders (         
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                ‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏µ‡πà TEXT,
                ‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ TEXT,
                ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ TEXT,
                ‡∏£‡∏≤‡∏Ñ‡∏≤ REAL,
                ‡∏™‡∏•‡∏¥‡∏õ TEXT,
                ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà DATE
            )''')
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS menu (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                ‡∏ä‡∏∑‡πà‡∏≠ TEXT ,
                ‡∏£‡∏≤‡∏Ñ‡∏≤ REAL,
                path TEXT
            )''')

    def setup_ui(self):
        self.bar()
        self.head()
        self.input()
        self.display_menu()


    def bar(self):
        top_bar = tk.Frame(self.root, bg="#656863", height=60, width=1520)
        top_bar.place(x=0, y=0)
        top_bar.pack_propagate(False)

        sigh = tk.Label(
            top_bar, text=" MN Coffee",bg="#656863",fg="white", font=self.font16 ,height=2
        )
        sigh.pack(side="left", padx=5, pady=10)

        exit_button = tk.Button(
            top_bar, text=" ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö", command=root.destroy, bg="black",fg="white", font=self.font10 ,height=2
        )
        exit_button.pack(side="right", padx=5, pady=10)
        # ‡∏õ‡∏∏‡πà‡∏° About Me
        about_button = tk.Button(
            top_bar, text=" üòÄ\nAbout Us", command=self.about, bg="#A7A79C", font=self.font10 ,height=2,width=10
        )
        about_button.pack(side="right", padx=5, pady=10)

        # ‡∏õ‡∏∏‡πà‡∏° Admin
        admin_button = tk.Button(
            top_bar, text=" Admin", command=self.admin, bg="#A7A79C", font=self.font10 ,height=2,width=10
        )
        admin_button.pack(side="right", padx=5, pady=10)   


    def head(self):
        self.png = PhotoImage(file="C:/head.png")
        imageh = tk.Label(self.scrollable_frame, image=self.png, bg="#E9E7DC",height=220)
        imageh.image = self.png  # ‡πÄ‡∏Å‡πá‡∏ö reference ‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û
        imageh.pack(side="top", anchor="nw", padx=0, pady=45)

    def buttons(self):
        frame = tk.Frame(self.scrollable_frame, bg="#E9E7DC")
        frame.pack(pady=10)

        delete = tk.Button(frame, text="‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", command=self.delete, bg="#CF8C8C", font=self.font16)
        delete.pack(side="left", padx=10)

        pay = tk.Button(frame, text="‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô", command=self.pay, bg="#909270", font=self.font16)
        pay.pack(side="left", padx=10)

    def input(self):
        input_frame = tk.Frame(self.scrollable_frame, bg="#E9E7DC")
        input_frame.pack(pady=10)

        # ‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
        tk.Label(input_frame, text="‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:", font=self.font16, bg="#E9E7DC").grid(row=0, column=0, padx=5, pady=0, sticky="e")
        self.user = tk.Entry(input_frame, font=self.font16, width=35)
        self.user.insert(0, self.customer_name)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        self.user.grid(row=0, column=1, padx=5, pady=0, sticky="w")

        # ‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏µ‡πà
        tk.Label(input_frame, text="‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏µ‡πà:", font=self.font16, bg="#E9E7DC").grid(row=0, column=2, padx=5, sticky="e")
        self.tb_num = tk.StringVar(value=self.table_number)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        self.tb_menu = ttk.Combobox(input_frame, textvariable=self.tb_num, values=[str(i) for i in range(0, 13)], font=self.font16, width=10, state="readonly")
        self.tb_menu.grid(row=0, column=3, padx=5, pady=0, sticky="w")
        

    def display_menu(self):
        self.menu = {}
        self.images = {}
        self.selected_menu = None

        # ‡∏î‡∏∂‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏à‡∏≤‡∏Å db
        self.cursor.execute("SELECT ‡∏ä‡∏∑‡πà‡∏≠, ‡∏£‡∏≤‡∏Ñ‡∏≤, path FROM menu")
        for row in self.cursor.fetchall():
            name, price, img_path = row
            self.menu[name] = int(price)
            self.images[name] = tk.PhotoImage(file=img_path)

        self.menu_per_page = 8  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤
        self.current_page = 0  
        self.total_pages = (len(self.menu) + self.menu_per_page - 1) // self.menu_per_page

        self.update_menu_display()

    def update_menu_display(self):
        # ‡∏•‡πâ‡∏≤‡∏á Frame ‡πÄ‡∏Å‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏ô‡∏π
        for widget in self.scrollable_frame.winfo_children():
            widget.destroy()

        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ head ‡πÅ‡∏•‡∏∞ input
        self.head()
        self.input()

        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á
        start_index = self.current_page * self.menu_per_page
        end_index = start_index + self.menu_per_page
        items = list(self.menu.items())[start_index:end_index]

        frame = tk.Frame(self.scrollable_frame, bg="#E9E7DC")
        frame.pack(pady=10)

        for i, (name, price) in enumerate(items):
            button = tk.Button(frame, text=f"{name} - {price} ‡∏ö‡∏≤‡∏ó", compound="top", image=self.images[name], width=220, height=150,
                               font=self.font16, command=lambda n=name: self.select_menu(n), bg="#D3D3CA")
            button.grid(row=i // 4, column=i % 4, padx=5, pady=5)

        # ‡∏õ‡∏∏‡πà‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ,‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
        nav_frame = tk.Frame(self.scrollable_frame, bg="#E9E7DC")
        nav_frame.pack(pady=10)

        if self.current_page > 0:
            prev_button = tk.Button(nav_frame, text="‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö", command=self.prev_page, font=self.font16, bg="#d7c596",width=10)
            prev_button.pack(side="left", padx=10)

        if self.current_page < self.total_pages - 1:
            next_button = tk.Button(nav_frame, text="‡∏ñ‡∏±‡∏î‡πÑ‡∏õ", command=self.next_page, font=self.font16, bg="#d7c596",width=10)
            next_button.pack(side="left", padx=10)

        # ‡πÉ‡∏ä‡πâ setup_option_var, list, buttons ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å, ‡∏ï‡∏≤‡∏£‡∏≤‡∏á, ‡πÅ‡∏•‡∏∞‡∏õ‡∏∏‡πà‡∏°
        self.setup_option_var()
        self.list()
        self.buttons()

    def next_page(self):
        if self.current_page < self.total_pages - 1:
            self.save_user_input()
            self.save_table_data() 
            self.current_page += 1
            self.update_menu_display()

    def prev_page(self):
        if self.current_page > 0:
            self.save_user_input()
            self.save_table_data()  
            self.current_page -= 1
            self.update_menu_display()

    def save_user_input(self):
        self.customer_name = self.user.get()
        self.table_number = self.tb_num.get()

    def setup_option_var(self):
        frame = tk.Frame(self.scrollable_frame, bg="#E9E7DC")
        frame.pack(pady=10)

        self.option_var = tk.StringVar(value="")
        for option, price in [("Hot", 5), ("Iced", 10), ("Mix", 15)]:
            tk.Radiobutton(frame, text=f"{option} (+{price} ‡∏ö‡∏≤‡∏ó)", variable=self.option_var, value=option, font=self.font16, bg="#E9E7DC").pack(side="left", padx=10)

        #‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏Å‡πâ‡∏ß
        tk.Label(frame, text="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏Å‡πâ‡∏ß:", font=self.font16, bg="#E9E7DC").pack(side="left", padx=5)
        self.quantity_var = tk.IntVar(value=1)
        self.quantity_spinbox = tk.Spinbox(frame, from_=1, to=99, textvariable=self.quantity_var, font=self.font16, width=5)
        self.quantity_spinbox.pack(side="left", padx=10)

        # ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        add = tk.Button(frame, text="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", command=self.add, bg="#8FC0CB", font=self.font16)
        add.pack(side="right", padx=10)

    def list(self):
        self.style = ttk.Style()
        self.style.configure("Treeview.Heading", font=self.font16)
        self.style.configure("Treeview", rowheight=30, font=self.font16)

        list_frame = tk.Frame(self.scrollable_frame, bg="#E9E7DC")
        list_frame.pack(pady=10)

        self.tree = ttk.Treeview(list_frame, columns=("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", "‡∏£‡∏≤‡∏Ñ‡∏≤"), show='headings', height=7)
        self.tree.pack(side="left", fill="both", expand=True)

        self.tree.column("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", width=500, anchor="center")
        self.tree.column("‡∏£‡∏≤‡∏Ñ‡∏≤", width=300, anchor="center")
        self.tree.heading("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", text="‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        self.tree.heading("‡∏£‡∏≤‡∏Ñ‡∏≤", text="‡∏£‡∏≤‡∏Ñ‡∏≤")

        scrollbar = tk.Scrollbar(list_frame, orient="vertical", command=self.tree.yview)
        scrollbar.pack(side="right", fill="y")
        self.tree.configure(yscrollcommand=scrollbar.set)

        # ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        for order in self.order_list:
            self.tree.insert("", "end", values=order)

    def save_table_data(self):
        self.order_list = []
        for item in self.tree.get_children():
            values = self.tree.item(item, "values")
            self.order_list.append(values)  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö tuple

    def buttons(self):

        frame = tk.Frame(self.scrollable_frame, bg="#E9E7DC")
        frame.pack(pady=10)

        delete = tk.Button(frame, text="‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", command=self.delete, bg="#CF8C8C", font=self.font16)
        delete.pack(side="left", padx=10)

        pay = tk.Button(frame, text="‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô", command=self.pay, bg="#909270", font=self.font16)
        pay.pack(side="left", padx=10)

    def select_menu(self, name):
        self.selected_menu = name
        messagebox.showinfo("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π", f"‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å {name}")

    def add(self):
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏•‡∏∞ db
        table, customer,quantity = self.tb_num.get(), self.user.get(),self.quantity_var.get() 
        if table == "0" or not customer or not self.selected_menu or not self.option_var.get():
            messagebox.showwarning("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")

            return
        
        if quantity <=0 or quantity >=11:
            messagebox.showwarning("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")

            return
        
        #‡∏ó‡∏≥‡∏£‡∏≤‡∏Ñ‡∏≤
        option = self.option_var.get()
        base_price = self.menu[self.selected_menu]
        extra_price = {"Hot": 5, "Iced": 10, "Mix": 15}[option]
        quantity = self.quantity_var.get()  #‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏Å‡πâ‡∏ß
        total_price = (base_price + extra_price) * quantity  #‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤

        self.order_list.append((f"{self.selected_menu} ({option}) x{quantity}", f"{total_price}"))

        # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        self.tree.insert("", "end", values=(f"{self.selected_menu} ({option}) x{quantity}", f"{total_price}"))
        self.cursor.execute('''
            INSERT INTO orders (‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏µ‡πà, ‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤, ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£, ‡∏£‡∏≤‡∏Ñ‡∏≤, ‡∏™‡∏•‡∏¥‡∏õ, ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (table, customer, f"{self.selected_menu} ({option}) x{quantity}", total_price, None, datetime.now().date()))
        self.conn.commit()

        # reset ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        self.selected_menu = None
        self.option_var.set("")
        self.quantity_var.set(1)  # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏Å‡πâ‡∏ß‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô 1

    def delete(self):
        selected_item = self.tree.selection()
        if not selected_item:
            messagebox.showwarning("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö")
            return

        confirm = messagebox.askyesno("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö", "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")
        if confirm:
            # ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å TreeView
            item = self.tree.item(selected_item)
            values = item['values']
            item_name = values[0]

            # ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            self.cursor.execute('''DELETE FROM orders WHERE ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ = ?''', (item_name,))
            self.conn.commit()

            self.tree.delete(selected_item)

            messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

            
    def pay(self):
        total = sum(int(self.tree.item(item, 'values')[1]) for item in self.tree.get_children())
        if total == 0:
            messagebox.showwarning("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á")
            return
        
        self.show_payment_window(total)

    def show_payment_window(self, total):   #‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
        payment_window = tk.Toplevel(self.root)
        payment_window.title("‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô")
        payment_window.attributes('-fullscreen', True)
        payment_window.config(bg="#E9E7DC")

        #‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°, ‡∏Ñ‡∏¥‡∏ß‡∏≠‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î
        tk.Label(payment_window, text=f"‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏° {total:,.2f} ‡∏ö‡∏≤‡∏ó", font=self.font40, fg="white", bg="#585650", width=50, height=2).pack(pady=0)
        image = PhotoImage(file="C:/qr1.png")  
        self.png = PhotoImage(file="C:/qr1.png")
        imageqr = tk.Label(payment_window, image=self.png, bg="#E9E7DC")
        imageqr.pack(pady=20)
        
        #‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ
        upload = tk.Button(payment_window, text="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô (‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏™‡∏•‡∏¥‡∏õ)", command=self.slip, bg="#B2DFF7", font=self.font16)
        upload.pack(pady=10)

        close = tk.Button(payment_window, text="‡∏Å‡∏•‡∏±‡∏ö", command=lambda: [payment_window.destroy(), self.root.deiconify()], bg="#CF8C8C", font=self.font16)
        close.pack(pady=10)

    def slip(self):
        #‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏•‡∏¥‡∏õ
        path = filedialog.askopenfilename(title="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏•‡∏¥‡∏õ", filetypes=[("Image files", "*.png;*.jpg;*.jpeg")])
        if path:
            with open(path, 'rb') as file:
                data = file.read()  #‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô binary mode

            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï DB
            self.cursor.execute('''
                UPDATE orders SET ‡∏™‡∏•‡∏¥‡∏õ = ? WHERE id = (SELECT MAX(id) FROM orders)
            ''', (data,))
            self.conn.commit()
            messagebox.showinfo("‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", "‡∏™‡∏•‡∏¥‡∏õ‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß!")
            self.table_number = self.tb_num.get()
            self.create_receipt_pdf(r"C:\Users\user\Desktop\project\receipt.pdf")  # ‡∏ó‡∏≥ pdf
            self.show_receipt(r"C:\Users\user\Desktop\project\receipt.pdf")  # ‡∏Ç‡∏∂‡πâ‡∏ô pdf

            # ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
            self.tree.delete(*self.tree.get_children())
            self.order_list = []  # Clear

    def create_receipt_pdf(self, filename):
        c = canvas.Canvas(filename, pagesize=(400, 1000))
        width, height = 400, 1000

        c.setFont("Helvetica", 32)
        c.drawCentredString(width / 2, height - 70, f"{self.table_number}")

        c.setFont("Helvetica", 22)
        c.drawCentredString(width / 2, height - 100, "MN Coffee")

        c.setFont("Helvetica", 12)
        c.drawCentredString(width / 2, height - 120, "Address: 123 Khonkaen, Thailand")
        c.drawCentredString(width / 2, height - 140, "Tel: 061-923-9991")
        c.drawCentredString(width / 2, height - 160, "---------------------------------------------------------------------")
        c.drawCentredString(width / 2, height - 180, f"Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        c.drawCentredString(width / 2, height - 200, "---------------------------------------------------------------------")

        y = height - 220

        for order in self.order_list:
            item_name, price = order
            c.drawString(50, y, item_name)
            c.drawString(320, y, str(price))
            y -= 20

        total_price = sum(int(order[1]) for order in self.order_list)
        c.drawCentredString(width / 2, y - 20, f"Total: {total_price:,.2f} THB")
        c.drawCentredString(width / 2, y - 40, "**************************************************************")
        c.drawCentredString(width / 2, y - 60, "THANK YOU")
        c.save()

    def show_receipt(self, filename):
        import webbrowser
        webbrowser.open_new(filename)

    def show_slip(self, order_id):
        #‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏™‡∏•‡∏¥‡∏õ
        self.cursor.execute("SELECT slip_path FROM orders WHERE id = ?", (order_id,))
        data = self.cursor.fetchone()[0]
        if data:
            image = Image.open(io.BytesIO(data))  
            image = ImageTk.PhotoImage(image)
            label = tk.Label(self.root, image=image)
            label.image = image 
            label.pack()
            self.conn.commit()

    def closing(self):
        self.conn.close()
        self.root.destroy()

    def about(self):
        self.root.withdraw()
        about_window = tk.Toplevel(self.root)
        about_window.title("About Us")
        about_window.attributes('-fullscreen', True)
        about_window.config(bg="#F4EEED")
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö
        close = tk.Button(
            about_window, text="‡∏Å‡∏•‡∏±‡∏ö", command=lambda: [about_window.destroy(), self.root.deiconify()], bg="#D595A0", font=self.font16 ,width=10
        )
        close.pack(side="bottom", padx=20, pady=10)

        image = PhotoImage(file="C:/Abo.png")  
        self.png = PhotoImage(file="C:/Abo.png")
        imageab = tk.Label(about_window, image=self.png, bg="#F4EEED")
        imageab.pack(pady=0)

    def admin(self):
        self.root.withdraw()
        admin_window = tk.Toplevel(self.root)
        admin_window.title("Admin")
        admin_window.attributes('-fullscreen', True)
        admin_window.config(bg="#F4EEED")

        frame = tk.Frame(admin_window, bg="#F4EEED", height=150)
        frame.pack(pady=10)

        tk.Label(admin_window, text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", font=self.font40).pack(anchor="center", pady=15)
        
        self.passw = tk.Entry(admin_window, font=self.font40, show="*", width=20)
        self.passw.pack(pady=10, anchor="center")

        def validate_password():
            pw = self.passw.get()
            if pw == "123456": 
                self.show_admin_dashboard(admin_window)
            else:
                messagebox.showwarning("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
        
        frameb = tk.Frame(admin_window, bg="#F4EEED")
        frameb.pack(pady=10)

        exit_button = tk.Button(
            frameb, text=" ‡∏Å‡∏•‡∏±‡∏ö", command=lambda: [admin_window.destroy(), self.root.deiconify()], bg="#D595A0", font=self.font16, height=1, width=10
        )
        exit_button.pack(side="left", padx=20, pady=10)

        tk.Button(
            frameb,
            text="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô",
            command=validate_password,
            bg="#A7A79C",
            font=self.font16,
            width=10
        ).pack(side="left", padx=20, pady=10)

    def show_admin_dashboard(self, admin_window):
        admin_window.destroy()

        admin1_window = tk.Toplevel(self.root)
        admin1_window.title("Admin")
        admin1_window.attributes('-fullscreen', True)
        admin1_window.config(bg="#F4EEED")

        frame = tk.Frame(admin1_window, bg="#F4EEED", height=150)
        frame.pack(pady=10)
        tk.Label(admin1_window, text="Admin", font=self.font40, bg="#F4EEED").pack(pady=10)
        
        tk.Button(
            admin1_window,
            text="‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏°‡∏ô‡∏π",
            command=self.setting,
            bg="#8FC0CB",
            font=self.font20
        ).pack(pady=10)

        tk.Button(
            admin1_window,
            text="‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠",
            command=self.view_orders,
            bg="#8FC0CB",
            font=self.font20
        ).pack(pady=10)

        exit_button = tk.Button(
            admin1_window, text=" ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö", command=lambda: [admin1_window.destroy(), self.root.deiconify()], bg="#ff8d8d", font=self.font20, height=1, width=8
        )
        exit_button.pack(padx=20, pady=10)

    def show_menu_page(self):
        for widget in self.scrollable_frame.winfo_children():
            widget.destroy()  
        self.setup_ui()  #‡∏™‡∏£‡πâ‡∏≤‡∏á widgets ‡πÉ‡∏´‡∏°‡πà

    def setting(self):
        setting_window = tk.Toplevel(self.root)
        setting_window.title("‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏°‡∏ô‡∏π")
        setting_window.attributes('-fullscreen', True)
        setting_window.config(bg="#E9E7DC")
        tk.Label(setting_window, text="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏°‡∏ô‡∏π", font=self.font40, bg="#E9E7DC").pack(side="top", pady=20)

        # Frame ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π
        frame = tk.Frame(setting_window, bg="#E9E7DC")
        frame.pack(pady=5)

        # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        menu_tree = ttk.Treeview(frame, columns=("‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏π", "‡∏£‡∏≤‡∏Ñ‡∏≤", "‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û"), show="headings", height=10)
        menu_tree.pack(side="left", fill="both", expand=True)

        menu_tree.column("‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏π", width=300, anchor="center")
        menu_tree.column("‡∏£‡∏≤‡∏Ñ‡∏≤", width=200, anchor="center")
        menu_tree.column("‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û", width=200, anchor="center")
        menu_tree.heading("‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏π", text="----------------- ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏π -----------------")
        menu_tree.heading("‡∏£‡∏≤‡∏Ñ‡∏≤", text="------------ ‡∏£‡∏≤‡∏Ñ‡∏≤ ------------")
        menu_tree.heading("‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û", text="------------ ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ------------")

        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å db
        self.cursor.execute("SELECT ‡∏ä‡∏∑‡πà‡∏≠, ‡∏£‡∏≤‡∏Ñ‡∏≤, path FROM menu")
        for row in self.cursor.fetchall():
            menu_tree.insert('', 'end', values=row)

        # ‡πÅ‡∏ñ‡∏ö‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô
        scrollbar = ttk.Scrollbar(frame, orient="vertical", command=menu_tree.yview)
        scrollbar.pack(side="right", fill="y")
        menu_tree.configure(yscrollcommand=scrollbar.set)

        # ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏°‡∏ô‡∏π
        form_frame = tk.Frame(setting_window, bg="#E9E7DC")
        form_frame.pack(pady=5)

        tk.Label(form_frame, text="‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏π:", font=self.font16, bg="#F4EEED").grid(row=0, column=0, padx=5, pady=5, sticky="e")
        menu_name_entry = tk.Entry(form_frame, font=self.font16, width=30)
        menu_name_entry.grid(row=0, column=1, padx=5, pady=5, sticky="w")

        #‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô eng ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        def validate_english_input(char):
            if not char.isascii():
                messagebox.showwarning("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©")
                return False
            return True

        validate_command = (self.root.register(validate_english_input), '%S')
        menu_name_entry.config(validate="key", validatecommand=validate_command)

        tk.Label(form_frame, text="‡∏£‡∏≤‡∏Ñ‡∏≤:", font=self.font16, bg="#F4EEED").grid(row=1, column=0, padx=5, pady=5, sticky="e")
        menu_price_entry = tk.Entry(form_frame, font=self.font16, width=30)
        menu_price_entry.grid(row=1, column=1, padx=5, pady=5, sticky="w")

        # ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û
        image_path = tk.StringVar()
        tk.Label(form_frame, text="‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û:", font=self.font16, bg="#F4EEED").grid(row=2, column=0, padx=5, pady=5, sticky="e")
        tk.Entry(form_frame, textvariable=image_path, font=self.font16, width=30, state="readonly").grid(row=2, column=1, padx=5, pady=5, sticky="w")

        def select_image():
            path = filedialog.askopenfilename(title="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û", filetypes=[("Image files", ".png;.jpg;*.jpeg")])
            if path:
                image_path.set(path)

        tk.Button(form_frame, text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå", command=select_image, bg="#D3D3CA", font=self.font16).grid(row=2, column=3, padx=5, pady=5)

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏´‡∏°‡πà
        def add_menu():
            self.menu_items = list(self.menu.items())  # ‡πÅ‡∏õ‡∏•‡∏á dictionary ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏¥‡∏™‡∏ï‡πå
            name = menu_name_entry.get().strip()
            try:
                price = int(menu_price_entry.get().strip())
                img_path = image_path.get()
                if name and price > 0 and img_path:
                    self.cursor.execute("INSERT INTO menu (‡∏ä‡∏∑‡πà‡∏≠, ‡∏£‡∏≤‡∏Ñ‡∏≤, path) VALUES (?, ?, ?)", (name, price, img_path))
                    self.conn.commit()
                    menu_tree.insert('', 'end', values=(name, price, img_path))
                    menu_name_entry.delete(0, 'end')
                    menu_price_entry.delete(0, 'end')
                    image_path.set("")
                    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
                    self.menu_items = list(self.menu.items())
                    self.show_menu_page()
                else:
                    messagebox.showwarning("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
            except ValueError:
                messagebox.showwarning("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")

        # ‡∏•‡∏ö‡πÄ‡∏°‡∏ô‡∏π
        def delete_menu():
            selected = menu_tree.selection()
            if not selected:
                messagebox.showwarning("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö")
                return

            for item in selected:
                name = menu_tree.item(item, "values")[0]
                if name in self.menu:
                    del self.menu[name]
                    del self.images[name]
                self.cursor.execute("DELETE FROM menu WHERE ‡∏ä‡∏∑‡πà‡∏≠ = ?", (name,))
                self.conn.commit()
                menu_tree.delete(item)
            self.show_menu_page()

        # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏°‡∏ô‡∏π
        def edit_menu():
            selected = menu_tree.selection()
            if not selected or len(selected) > 1:
                messagebox.showwarning("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç")
                return

            item = selected[0]
            old_name = menu_tree.item(item, "values")[0]
            new_name = menu_name_entry.get().strip() or old_name
            try:
                new_price = menu_price_entry.get().strip()
                new_price = int(new_price) if new_price else menu_tree.item(item, "values")[1]
                new_img_path = image_path.get() or menu_tree.item(item, "values")[2]
                self.cursor.execute("UPDATE menu SET ‡∏ä‡∏∑‡πà‡∏≠ = ?, ‡∏£‡∏≤‡∏Ñ‡∏≤ = ?, path = ? WHERE ‡∏ä‡∏∑‡πà‡∏≠ = ?", (new_name, new_price, new_img_path, old_name))
                self.conn.commit()
                menu_tree.item(item, values=(new_name, new_price, new_img_path))
                if old_name in self.menu:
                    del self.menu[old_name]
                    del self.images[old_name]
                self.menu[new_name] = new_price
                self.images[new_name] = tk.PhotoImage(file=new_img_path)
                menu_name_entry.delete(0, 'end')
                menu_price_entry.delete(0, 'end')
                image_path.set("")
                self.menu_items = list(self.menu.items())
                self.show_menu_page()
            except ValueError:
                messagebox.showwarning("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î")

        # ‡∏õ‡∏∏‡πà‡∏°
        tk.Button(form_frame, text="‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π", command=add_menu, bg="#8FC0CB", font=self.font16).grid(row=3, column=0, padx=5, pady=10)
        tk.Button(form_frame, text="‡∏•‡∏ö‡πÄ‡∏°‡∏ô‡∏π", command=delete_menu, bg="#CF8C8C", font=self.font16).grid(row=3, column=1, padx=5, pady=10)
        tk.Button(form_frame, text="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏°‡∏ô‡∏π", command=edit_menu, bg="#ffe38d", font=self.font16).grid(row=3, column=2, padx=5, pady=10)

        frame1 = tk.Label(setting_window,text=".",fg="#E9E7DC", bg="#E9E7DC",height=50,width=1520)
        frame1.pack(pady=0,side="bottom")
        frame1.pack_propagate(False)
        tk.Button(frame1, text="‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö", command=setting_window.destroy, bg="#ffb68d", font=self.font16,width=10).pack(side="left", pady=0,padx=10)
        tk.Button(frame1, text="‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å", command=lambda: [setting_window.destroy(), self.root.deiconify()], bg="#ff8d8d", font=self.font16 ,height=1,width=10).pack(side="right", pady=0,padx=10)
    
    def view_orders(self):
        orders_window = tk.Toplevel(self.root)
        self.conn = sqlite3.connect(r"C:\Users\user\Desktop\project\coffee.db")
        orders_window.title("‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠")
        orders_window.attributes('-fullscreen', True)
        orders_window.config(bg="#E9E7DC")

        tk.Label(orders_window, text="‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", font=self.font16, bg="#E9E7DC").pack(pady=10)

        # ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á
        filter_frame = tk.Frame(orders_window, bg="#E9E7DC")
        filter_frame.pack(pady=10)

        # ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô
        tk.Label(filter_frame, text="‡∏ß‡∏±‡∏ô:", font=self.font16, bg="#E9E7DC").grid(row=0, column=0, padx=5)
        day_combo = ttk.Combobox(filter_frame, values=["All"] + [str(i) for i in range(1, 32)], state="readonly", font=("Arial", 14))
        day_combo.current(0)
        day_combo.grid(row=0, column=1, padx=5)

        # ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
        tk.Label(filter_frame, text="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô:", font=self.font16, bg="#E9E7DC").grid(row=0, column=2, padx=5)
        month_combo = ttk.Combobox(filter_frame, values=["All"] + [str(i) for i in range(1, 13)], state="readonly", font=("Arial", 14))
        month_combo.current(0)
        month_combo.grid(row=0, column=3, padx=5)

        # ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ
        current_year = datetime.now().year
        years = ["All"] + [str(year) for year in range(current_year - 10, current_year + 1)]
        tk.Label(filter_frame, text="‡∏õ‡∏µ:", font=self.font16, bg="#E9E7DC").grid(row=0, column=4, padx=5)
        year_combo = ttk.Combobox(filter_frame, values=years, state="readonly", font=("Arial", 14))
        year_combo.current(0)
        year_combo.grid(row=0, column=5, padx=5)

        # ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏£‡∏≠‡∏á
        def apply_filter():
            selected_day = day_combo.get()
            selected_month = month_combo.get()
            selected_year = year_combo.get()

            query = "SELECT * FROM orders WHERE 1=1"
            params = []

            if selected_day != "All":
                query += " AND strftime('%d', ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà) = ?"
                params.append(selected_day.zfill(2))
            if selected_month != "All":
                query += " AND strftime('%m', ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà) = ?"
                params.append(selected_month.zfill(2))
            if selected_year != "All":
                query += " AND strftime('%Y', ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà) = ?"
                params.append(selected_year)

            self.cursor.execute(query, params)
            orders = self.cursor.fetchall()

            # ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
            for item in order_tree.get_children():
                order_tree.delete(item)

            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
            total_price = 0
            for order in orders:
                order_tree.insert('', 'end', values=(order[6], order[3], order[4]))
                total_price += order[4]

            total_label.config(text=f"‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_price:,.2f} ‡∏ö‡∏≤‡∏ó")

        filter_button = tk.Button(filter_frame, text="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô", command=apply_filter, bg="#A8D5BA", font=self.font16)
        filter_button.grid(row=0, column=6, padx=10)

        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
        order_tree = ttk.Treeview(orders_window, columns=("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", "‡∏£‡∏≤‡∏Ñ‡∏≤"), show="headings", height=15)
        order_tree.pack(anchor="center", fill="both", padx=10, pady=10)

        # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
        order_tree.column("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", width=150, anchor="center") 
        order_tree.column("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", width=300, anchor="center")
        order_tree.column("‡∏£‡∏≤‡∏Ñ‡∏≤", width=150, anchor="center")

        order_tree.heading("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", text="******** ‡∏õ‡∏µ-‡πÄ‡∏î‡∏∑‡∏≠‡∏ô-‡∏ß‡∏±‡∏ô ********")
        order_tree.heading("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", text="******** ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ********")
        order_tree.heading("‡∏£‡∏≤‡∏Ñ‡∏≤", text="******** ‡∏£‡∏≤‡∏Ñ‡∏≤ ********")

        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        self.cursor.execute("SELECT * FROM orders")
        orders = self.cursor.fetchall()

        total_price = 0
        for order in orders:
            order_tree.insert('', 'end', values=(order[6], order[3], order[4]))
            total_price += order[4]

        scrollbar = ttk.Scrollbar(orders_window, orient="vertical", command=order_tree.yview)
        scrollbar.pack(side="right", fill="y")
        order_tree.configure(yscrollcommand=scrollbar.set)

        # ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        total_label = tk.Label(orders_window, text=f"‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_price:,.2f} ‡∏ö‡∏≤‡∏ó", font=self.font16, bg="#E9E7DC")
        total_label.pack(pady=10)
        
        # ‡∏õ‡∏∏‡πà‡∏°
        tk.Button(orders_window, text="‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢", command=self.fetch, bg="#909270", font=self.font16).pack(pady=10)
        tk.Button(orders_window, text="‡∏õ‡∏¥‡∏î", command=orders_window.destroy, bg="#D595A0", font=self.font16,width=9).pack(pady=10)

        # ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á
        def on_close():
            self.conn.close()
            orders_window.destroy()

        orders_window.protocol("WM_DELETE_WINDOW", on_close)

    def fetch(self):
        or_window = tk.Toplevel(self.root)
        or_window.title("‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢")
        self.conn = sqlite3.connect(r"C:\Users\user\Desktop\project\coffee.db")
        or_window.attributes('-fullscreen', True)
        or_window.config(bg="#E9E7DC")

        tk.Label(or_window, text="‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠", font=self.font16, bg="#E9E7DC").pack(pady=10)

        filter_frame = tk.Frame(or_window, bg="#E9E7DC")
        filter_frame.pack(pady=10)
        
        # ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô
        tk.Label(filter_frame, text="‡∏ß‡∏±‡∏ô:", font=self.font16, bg="#E9E7DC").grid(row=0, column=0, padx=5)
        day_combo = ttk.Combobox(filter_frame, values=["All"] + [str(i) for i in range(1, 32)], state="readonly", font=("Arial", 14))
        day_combo.current(0)
        day_combo.grid(row=0, column=1, padx=5)

        # ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
        tk.Label(filter_frame, text="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô:", font=self.font16, bg="#E9E7DC").grid(row=0, column=2, padx=5)
        month_combo = ttk.Combobox(filter_frame, values=["All"] + [str(i) for i in range(1, 13)], state="readonly", font=("Arial", 14))
        month_combo.current(0)
        month_combo.grid(row=0, column=3, padx=5)

        # ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ
        current_year = datetime.now().year
        years = ["All"] + [str(year) for year in range(current_year - 10, current_year + 1)]
        tk.Label(filter_frame, text="‡∏õ‡∏µ:", font=self.font16, bg="#E9E7DC").grid(row=0, column=4, padx=5)
        year_combo = ttk.Combobox(filter_frame, values=years, state="readonly", font=("Arial", 14))
        year_combo.current(0)
        year_combo.grid(row=0, column=5, padx=5)

        # ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏£‡∏≠‡∏á
        def apply_filter():
            selected_day = day_combo.get()
            selected_month = month_combo.get()
            selected_year = year_combo.get()

            query = "SELECT * FROM orders WHERE 1=1"
            params = []

            if selected_day != "All":
                query += " AND strftime('%d', ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà) = ?"
                params.append(selected_day.zfill(2))
            if selected_month != "All":
                query += " AND strftime('%m', ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà) = ?"
                params.append(selected_month.zfill(2))
            if selected_year != "All":
                query += " AND strftime('%Y', ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà) = ?"
                params.append(selected_year)

            self.cursor.execute(query, params)
            orders = self.cursor.fetchall()

            if not orders:
                tk.messagebox.showinfo("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
            else:
                summarized_orders = {}
                for order in orders:
                    item_name = order[3].rsplit("x", 1)[0].strip()
                    quantity = self.get_quantity(order[3])
                    price = order[4]
                    if item_name in summarized_orders:
                        summarized_orders[item_name]['quantity'] += quantity
                        summarized_orders[item_name]['price'] += price
                    else:
                        summarized_orders[item_name] = {'quantity': quantity, 'price': price}

                self.populate_treeview(summarized_orders, or_tree)

            total_price = sum(order[4] for order in orders)
            total_label.config(text=f"‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_price:,.2f} ‡∏ö‡∏≤‡∏ó")

        filter_button = tk.Button(filter_frame, text="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô", command=apply_filter, bg="#A8D5BA", font=self.font16)
        filter_button.grid(row=0, column=6, padx=10)

        # ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
        or_tree = ttk.Treeview(or_window, columns=("‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà", "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏Å‡πâ‡∏ß", "‡∏£‡∏≤‡∏Ñ‡∏≤"), show="headings", height=15)
        or_tree.pack(anchor="center", fill="both", padx=10, pady=10)
        or_tree.column("‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà", width=50, anchor="center")
        or_tree.column("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", width=300, anchor="center")
        or_tree.column("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏Å‡πâ‡∏ß", width=150, anchor="center")
        or_tree.column("‡∏£‡∏≤‡∏Ñ‡∏≤", width=150, anchor="center")
        or_tree.heading("‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà", text="‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà")
        or_tree.heading("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", text="‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        or_tree.heading("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏Å‡πâ‡∏ß", text="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏Å‡πâ‡∏ß")
        or_tree.heading("‡∏£‡∏≤‡∏Ñ‡∏≤", text="‡∏£‡∏≤‡∏Ñ‡∏≤")

        scrollbar = ttk.Scrollbar(or_window, orient="vertical", command=or_tree.yview)
        scrollbar.pack(side="right", fill="y")
        or_tree.configure(yscrollcommand=scrollbar.set)

        self.cursor.execute("SELECT * FROM orders")
        orders = self.cursor.fetchall()
        orders_sorted = sorted(
            orders, 
            key=lambda order: self.get_quantity(order[3]),  
            reverse=True
        )

        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏±‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏Å‡πâ‡∏ß
        summarized_orders = {}
        for order in orders_sorted:
            item_name = order[3].rsplit("x", 1)[0].strip()
            quantity = self.get_quantity(order[3])
            price = order[4]
            if item_name in summarized_orders:
                summarized_orders[item_name]['quantity'] += quantity
                summarized_orders[item_name]['price'] += price
            else:
                summarized_orders[item_name] = {'quantity': quantity, 'price': price}

        self.populate_treeview(summarized_orders, or_tree)

        total_price = sum(order[4] for order in orders)
        total_label = tk.Label(or_window, text=f"‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_price:,.2f} ‡∏ö‡∏≤‡∏ó", font=self.font16, bg="#E9E7DC")
        total_label.pack(pady=10)

        tk.Button(or_window, text="‡∏Å‡∏•‡∏±‡∏ö", command=or_window.destroy, bg="#D595A0", font=self.font16, width=9).pack(pady=10)

        def on_close():
            self.conn.close()
            or_window.destroy()

        or_window.protocol("WM_DELETE_WINDOW", on_close)

    def get_quantity(self, order_string):
        try:
            return int(order_string.split("x")[-1].strip())
        except (IndexError, ValueError):
            return 0

    def populate_treeview(self, summarized_orders, or_tree):
        for item in or_tree.get_children():
            or_tree.delete(item)

        for idx, (item_name, details) in enumerate(summarized_orders.items()):
            formatted_price = "{:,.2f}".format(details['price'])
            or_tree.insert('', 'end', values=(idx + 1, item_name, details['quantity'], formatted_price))


if __name__ == "__main__":
    root = tk.Tk()
    app = CoffeeApp(root)
    root.protocol("WM_DELETE_WINDOW", app.closing)
    root.mainloop()
